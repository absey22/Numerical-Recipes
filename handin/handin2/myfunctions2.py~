import numpy as np

#FUNCTIONS to be called by the other scripts of this hand in assignment

#seed initially supplied to RNG
I_0=np.uint64(7919348)
print("Initial seed set in myfunctions2.py:",I_0)




# ==========================  1(a)   ==========================


#(BORROWED FROM MY EXERCISE 1)
#64-bit XOR-shift: the input must be 64-bit and not equal to 0
#this has a period of up to 2^64 - 1
#using parameter a1,a2,a3 from the lecture slides
def xorshift(val,a=(21,35,4)):
    a=np.uint64(a)
    val=np.uint64(val)                   #recast the shifting parameters to avoid
    val=val^(val>>a[0])                  #  stuffing val into a smaller data type with XOR shift
    val=val^(val<<a[1])
    val=val^(val>>a[2])
    return val #renormalize output for input to MWC


#Multiply With Carry: base b=2^32 and multiplier a=4294957665 from lecture slides
def MWC(val,a=4294957665):
    a=np.uint64(a)
    val=np.uint64(val)
    val=a*( val & np.uint64((2**32)-1) ) + ( val>>np.uint64(32) ) #apply mwc and keep first 32 bits
    return val



def Urng(size=10):
    rnglist=np.zeros(size)
    global I_0 #get global value for reassignment after rng
    for i in range(len(rnglist)): #append uniform draws to rnglist
        draw=xorshift(MWC(I_0))
        I_0=draw #redefine the global seed for next use
        rnglist[i]=draw/((2**64)-1) #normalize to 0,1
    return rnglist




# ==========================  1(b)   ==========================


def BoxMuller(N,mean=0.0,stdv=1.0):
    #take two uniform variates
    U1,U2=Urng(size=int(N)),Urng(size=int(N)) 
    #and transform them into a gaussian variate (of scalable size)
    X=np.sin(2*np.pi*U1)*np.sqrt(-2.*np.log(U2))
    return X*stdv+mean    #to new mu/sigma with user defined mean and stdev

#dummy function for plotting gaussian shape
def GaussianPDF(x,mu=0.0,s=1.0):
    return (2. * np.pi*(s)**2.)**-0.5 * np.exp( - (x - mu)**2. / (2. * s**2) )



# ==========================  1(c)   ==========================
from math import exp,erf

def GaussianCDF(x,mu=0.0,s=1.0):
    def trapezoidrule(panels,x1,x2):
        h=(x2-x1)/panels
        integral=0.5*(GaussianPDF(x1,mu,s)+GaussianPDF(x2,mu,s))
        for i in range(1,int(panels)):
            integral+=GaussianPDF(x1+i*h,mu,s)
        return h*integral
    #return trapezoidrule(20,-5*mu,x)
    return 0.5*(1.+ erf( (x - mu) / (s * (2.**0.5)) ))


def quicksort(data):
    if len(data)==0:
        return data
    pivot=data[-1] #pick an arbitrary pivot
    def partition(data,pivot):
        lo=[];mid=[];hi=[]
        for d in data:
            if d<pivot:
                lo.append(d)
            if d==pivot:
                mid.append(d)
            if d>pivot:
                hi.append(d)
        return lo,mid,hi
    lefthalf,pivotsection,righthalf=partition(data,pivot)
    sorteddata=np.concatenate((quicksort(lefthalf),pivotsection,quicksort(righthalf)))
    return sorteddata   


def Q_KS(z): #PDF for D as in Press et al. (a.k.a. the complementary CDF)
        if z<0.0:   #filter out the z conditions corresponding to a real cdf
            return np.nan
        if z==0.0:
            return 0.0
        else:        #otherwise calculate the actual p value at z
            expterm=exp(-2.*z**2.) 
            p=2*(expterm-expterm**4.+expterm**9.)
            return p

def mykstest(data,func=GaussianCDF):  #(defaults to test of standard normal)
    N=len(data)
    data_sorted=quicksort(data)   #sort it to look like a CDF
    #start searching for the maximum distance D btwn these the data/ideal cdf
    # this is the KS statistic
    D=0.0      #initilize distance
    for i in range(len(data_sorted)):
        fo=i*N**-1.      #counters to find distances from relative to the CDF
        fn=(i+1.)*N**-1.
        cdfeval=func(data_sorted[i],mu=0.0,s=1.0) #calculate cdf point
        dist_curr=max( (abs(fo-cdfeval) , abs(fn-cdfeval)) ) #get max of the two distances
        if dist_curr>D: #take the largest distance found in the data set
            D=dist_curr
    pval= Q_KS( (N**0.5+0.12+0.11*N**-0.5)*D )  #calculate corresponding p-value for this random observation of D (Press: Eqtn. 14.3.18)
    return D,pval
