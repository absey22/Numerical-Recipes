import numpy as np
import matplotlib.pyplot as plt



# ==========================  1(a)   ==========================
from myfunctions2 import Urng


uniformdraw=Urng(size=int(1e6))


#(FORMATTING PARTIALLY BORROWED FROM MY EXERCISE 1)
#plot the resulting 1000 floats generated:
plt.figure()
plt.subplot(2,2,1)
plt.plot(uniformdraw[0:1000:2],uniformdraw[1:1001:2],'ro')
plt.xlabel("$x_i$")
plt.ylabel("$x_{i+1}$")
plt.title("$n_{draws}$ = 1,000")

#plot index vs. magnitude
plt.subplot(2,2,2)
plt.xlabel("index i")
plt.ylabel("$x_i$")
plt.title("$n_{draws}$ = 1,000")
plt.bar(np.arange(len(uniformdraw[0:1000])),uniformdraw[0:1000])

#histogram the 1,000,000 random numbers
plt.subplot(2,1,2)
freq,bins,_=plt.hist(uniformdraw,bins=20,edgecolor='black', linewidth=1.2)
binmidpts=0.5*(bins[1:] + bins[:-1])                  #find mid point of each bin
plt.errorbar(binmidpts, freq, yerr=(freq)**0.5, fmt='none',label='Poissonian Std. dev.')
plt.hlines(50000,0,1,linestyles=':',label='Ideal Uniform')
plt.title("MWC & Xor Shift Uniform Variate ($n_{draws}$ = 1,000,000)")
plt.xlabel("True values (0.05 wide bins)")
plt.ylabel("Frequency")
plt.ylim(46000,52000)
plt.legend()
#plt.yticks([49600,49700,49800,49900,50000,50100,50200,50300])


#plt.legend(loc=3)
#plt.savefig("./plots/1A-rngquality.png")

#plt.show()



# ==========================  1(b)   ==========================
from myfunctions2 import BoxMuller,GaussianPDF



#perform Box Muller tranform from these uniform variates to a standard normal variate
# This function draws two lists of uniform variates from within
# (transformed again to given mean=3.0 and stdev=2.4)
mean=3.0
stddev=2.4
normdraw=BoxMuller(N=1000,mean=mean,stdv=stddev)

#plot the result
freq,bins,_=plt.hist(normdraw,bins=int(9*stddev),edgecolor='black', linewidth=1.5,density=True)
#list of stddev locations on x-axis
sigmabars=np.concatenate((mean-np.linspace(5*stddev,stddev,5),mean+np.linspace(stddev,5*stddev,5)))
#plot stddev locations
plt.vlines(mean,0,GaussianPDF(mean,mean,stddev),linewidth=1.5,linestyles='--')
plt.vlines(sigmabars,0,GaussianPDF(sigmabars,mean,stddev),linewidth=1.8,linestyles=':',color='r')
plt.title("Box-Muller Normal Variate ($n_{draws}$ = 1,000,000)")
plt.xlabel("True values")
plt.ylabel("Pseudorandom (pdf-normalized) Frequency")
#plot expected shape of ideal normal
plt.plot(bins, GaussianPDF(bins,mean,stddev),linewidth=2.2,linestyle="--",color='k',label='Ideal Normal ($\mu$='+str(mean)+', $\sigma$='+str(stddev)+')')
plt.legend()

#plt.show()


plt.clf()

# ==========================  1(c)   ==========================
from myfunctions2 import mykstest
from scipy.stats import kstest

#Prove: null hypothesis is that actual data follows a normal distribution
# accomplish by finding max distance between Gaussian CDF and data CDF

#The KS statistic D can be calculated as shown in Section 6.14 of Press et al.
# a p-value of the signficance of the D of this observation can therefore be found
# from that distribution.


#normaldraw=BoxMuller(100,mean=0,stdv=1.0)
#print(kstest(normaldraw,'norm')[1])
#print(kstest(normaldraw,'norm'))

dex=0.1
cnt=np.ones(10*(5-1))
pval=np.zeros((len(cnt),2))
for i in range(len(cnt)):
    cnt[i]+=i*dex
    print(cnt[i])
    normaldraw=BoxMuller(10**cnt[i],mean=0,stdv=1.0) #create a realization of data drawn from my Box-Muller algorithm (normal variates)
    pval[i,0]=mykstest(normaldraw)[1] #take pval from my function
    pval[i,1]=kstest(normaldraw,'norm')[1] #take pval from scipy function
plt.plot(cnt,pval[:,0],label="My KS test")
plt.plot(cnt,pval[:,1],label="SciPy KS test")
plt.xlabel("dex ($N_{points} = 10^{dex}$)")
plt.ylabel("p-value")
plt.legend()
plt.show()

